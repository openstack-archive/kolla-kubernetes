*
Bare Metal Deployment Guide for kolla-kubernetes

Instructions:
    
Please add a (TESTED-date) if you tested the steps up to that point.   If the instructions change we will be able to know who tested what when and debug the instructions more effectively.

If you see a CHERRYPICK in the documentation, that means that patch needs to be cherrypicked at that particular point to make forward progress.  This may mean the patch is under review or incomplete in some way but works for the purposes of this documentation.

These are sdake's notes on the setup of Kubernetes on two bare metal nodes for this event:
https://www.meetup.com/PhoenixRedHatSoftwareUserGroup/events/237219035/
	* ^^^ I dont see any details at this page on how to setup two baremetal nodes with kubernetes.
	* This page was the meetup page, the video below was presented at this meetup.  This meetup page has no details related to the setup.
	* Further would it be feasible over 2 KVM nodes?
	* Yes completely feasible over 2 KVM nodes (I think:)
	* No idea how to setup kubeadm - a few ironic peeps did that work for this meetup - we probably need to document that as well - maybe you can tackle this rwellum?

Here is the Video I showed of Kolla and Ironic mashed up in mp4 format:
https://drive.google.com/open?id=0B8q6xDPETSkHbU5ZVmJxR2QzbVU

*Contributors:
- sdake
- rwellum
- zhubingbing
- sambetts
- bradjones
- sogabe 

# Link to cloud.yaml (required for later steps - may need customization for your hardware): 
    This file is generated by /opt/kolla-kubernetes/tools/build_example_yaml.py
    
    https://etherpad.openstack.org/p/kolla-cloudyaml
	* this file needs some customization
	* TODO(sbezverk): can you identify the customizations needed?
 
From a working kubeadm deploy of kubernetes on TWO fresh machines (used machines may trigger problems)
	* Gate: kubectl get pods --all-namespaces" should show all pods including dns working

*Dependencies
	* docker
		* version 1.10.z (UNKNOWN)
	* Kubernetes
		* version 1.5.3
	* Helm
		* version 2.2.1
	* A fresh two node kudeadm deploy
		* version ??

(CHERRYPICK) This patch is needed as kollakube is broken as is (ignore gate failures at present - the patch is incomplete but works for this documentation):
https://review.openstack.org/#/c/439740/

AS ROOT: (sadly) 
	* dev guide has a section on how to set things up to not be root - can we use that here? 
	*  We will get to non-root soon, I want to get root working first since many people operate without sudo unfortunately.  There is no hard requirement on not using sudo although changing the docs around to support sudo may be difficult while we are still sorting out what they should be :)

  yum install -y epel-release
	* (TESTED MAR1)
	* (TESTED  MAR1)
  yum install -y ansible
	* (TESTED MAR1)
	* (TESTED  MAR1)
  yum install -y python-pip
	* (TESTED MAR1)
	* (TESTED  MAR1)
  yum install -y python-devel
	* (TESTED MAR1)
	* (TESTED  MAR1)

cd /opt
	* (TESTED MAR1)
	* why /opt?
	*  this is where I put it, it doesn't have to go there - it could easily go in ~/ although that would require changing all of the references to /opt in this etherpad
	*  Ok my thought is to use an environment var like: INSTALL=/opt - or make it clear that it's the user choice- had the same issue with the dev guide. Scripts all expected stuff in ~devel/ but you didn't find that out until a very late step in the process.

git clone http://github.com/openstack/kolla-ansible
	* (TESTED MAR1)
cd kolla/ansible
	* (TESTED MAR1)
	* i think `cd kolla-ansible/ansible`
	* the next step pip install -U . actually needs to be run in kolla/ansible dir, not kolla-ansible/ansible.  The original drection is correct.
pip install -U .
	* (TESTED)
 
 
	* (TESTED MAR1)
cd ../kolla-kubernetes
	* (TESTED MAR1)
	* clone first then cd into like above?
	* lets get it working first then refine it second :)
	* How do you cd into a directory that doesn't exist? :)
	* ../kolla-kubernetes doesn't exist yet so we have to "cd .." then clone then "cd ../kolla-kubernetes"
	* CORRECTED (MAR 5)
sudo pip install .
	* (TESTED MAR1)
cd ..
	* (TESTED MAR1)
git clone http://github.com/openstack/kolla (CROSSEDOUT)
cd kolla
pip install -U .
we should not need the kolla repository at all

sudo 
	* (TESTED MAR1)
	* Not sure what's in /usr/share/kolla-ansible... (CROSSEDOUT)
	* after a pip install, the playbooks and example config files are in /usr/share/kolla-ansible
	* I also had to copy:
	*     kolla-ansible/etc/kolla to /etc/kolla (this is what line 41 is supposed to do, perhaps the sudo cp command is wrong) 
	* This should be fixed now

cp -aR /opt/kolla-kubernetes/etc/kolla-kubernetes /etc
	* (TESTED MAR1)

(TODO: sdake) modify setup.cfg to install in the correct places (CHERRYPICK) (https://review.openstack.org/#/c/439941/ )

	* And looks like:
	* http://paste.openstack.org/show/601021/ steps are needed too:
    sudo ln -s `pwd`/kolla-ansible/etc/kolla /etc/kolla
    sudo ln -s `pwd`/kolla-ansible /usr/share/kolla
    sudo ln -s `pwd`/etc/kolla-kubernetes /etc/kolla-kubernetes
	* I really think we want to avoid these symlinks, they are super confusing and not helpful at all
	* + 1000000

sudo /opt/kolla-ansible/tools/generate_passwords.py
	* TESTED FEB 28
	* TESTED 

I think every step needs a description of what we are doing and why, e.g.
#Create a k8s namespace to isolate this kolla deployment
kubectl create namespace kolla
	* TESTED

# Label minime-02 as the compute and controller node
kubectl label node minime-02 kolla_compute=true kolla_controller=true


Need to edit globals.yml? I.e: http://paste.openstack.org/raw/600976/
	* and edit storage to your linking.
	* Although if you choose Ceph will we need more than two nodes?
	* (afaik ceph only supports single node atm? - pete)
/opt/kolla-ansible/tools/kolla-ansible genconfig
/opt/kolla-kubernetes/tools/secret-generator.py create
	* TESTED FEB 28 - worked when I got the pathing (linking) correct but concerned it wasn't that clean

# takes about 30 seconds
	* I don't like these statements, the dev guide does this too. I'm always 5x slower and then I don't know if it's me or some issue happening. Better to have a 'watch <something>' command until process is done.
	* works for me - feel free to add watch statements throughout the ehterpad docs :)
	* Ack

	* Also throughout this type of guide there should be steps to gate to the next step. For example at the very top we should say: proceed when k8s is healthy:"kubectl get pods --all-namespaces" should show all pods including dns working.
	* works for me - feel free to add the gating steps you think are necessary
		* Ack - added a couple so far

# create-configmaps is here: 
# https://etherpad.openstack.org/p/kolla-create-configmaps
./create-configmaps.sh
# takes about 1-2 minutes
# TODO(rwellum) Add gate to show it's finished and healthy
	* TESTED MARCH 1

/opt/kolla-kubernetes/tools/setup-resolv-conf.sh kolla

helm init
# Wait for helm init to complete
#Gate: watch "kubectl get pods -n kube-system | grep tiller" - look for "Running

#Gate: run helm version and check that both the client version and server version is returned.
#If only the client version is returned and not the server is returned, tiller is not ready even though 
#the watch statement above indicates it is ready
helm version
	* what to do when wrong version?
	* This is a gating step to verify that tiller and helm can communicate with one another
		* If only the client version is returned and not the server is returned, tiller is not ready even though the watch statement above indicates it is ready
	* If the version is wrong, then the operator didn't follow the instructions properly and should start over
	* TESTED MARCH 1


/opt/kolla-kubernetes/tools/helm_build_all.sh .
#Gate: check for images, ls | grep ".tgz" | wc -l
146
	* TESTED MARCH 1


# Link to kolla-service-start.sh: https://etherpad.openstack.org/p/kolla-service-start
# Note first time '/opt' explicitly used in a script TODO: sdake - I guess just make a decision if deterministic or use /opt 
# Requires cloud.yaml, https://etherpad.openstack.org/p/kolla-cloudyaml or use 
#./kolla-kubernetes/tools/build_example_yaml.py to build it.
	* It's then commented out - user has to decide what to customize.
	* Possibly provide a minimum working example - or the build_example could take some user inputs TODO: sbezvedez
	* Also note two interfaces need to be configured unique to the user
		* ext_interface_name and tunnel_interface
	* And external bridge needs to be named correctly: ext_bridge_name:
	* Also note refers to /root/cloud.yaml - but may not be where user has generated this file
	* BLOCKED
		* Failing with: 
		* Error: failed to parse ./cloud.yaml: error converting YAML to JSON: yaml: line 49: did not find expected key
		* That's the tunnel_interface - what should this tunnel interface be?

./kolla-service-start.sh

# wait for all pods to enter running state
watch kubectl get pods -n kolla

/opt/kolla-ansible/tools/kolla-ansible post-deploy

source /etc/kolla/admin-openrc.sh

./init-runonce

openstack floating ip create public1

(RETRIEVE THE IP FROM THIS OPERATION)

openstack server add floating ip demo1 {FILL IN IP}

FILL IN IP 10.87.49.251

To correct a failure:

helm install --debug /opt/kolla-kubernetes//helm/service/nova-cleanup --namespace kolla --name nova-cleanup --values cloud.yaml
